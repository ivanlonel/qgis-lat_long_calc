# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatLongCalcDialog
                                 A QGIS plugin
 Allows conversion of latitudes and longitudes between decimal degrees and DMS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-06-21
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Ivan Donisete Lonel
        email                : ivanlonel91@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtWidgets, uic

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), "lat_long_calc_dialog_base.ui"))


class LatLongCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatLongCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.spinBox_lat_d.valueChanged.connect(self.lat_dms_to_dd)
        self.spinBox_lat_m.valueChanged.connect(self.lat_dms_to_dd)
        self.doubleSpinBox_lat_s.editingFinished.connect(self.lat_dms_to_dd)
        self.comboBox_lat.currentTextChanged.connect(self.lat_dms_to_dd)

        self.doubleSpinBox_lat_d.editingFinished.connect(self.lat_dd_to_dms)

        self.spinBox_long_d.valueChanged.connect(self.long_dms_to_dd)
        self.spinBox_long_m.valueChanged.connect(self.long_dms_to_dd)
        self.doubleSpinBox_long_s.editingFinished.connect(self.long_dms_to_dd)
        self.comboBox_long.currentTextChanged.connect(self.long_dms_to_dd)

        self.doubleSpinBox_long_d.editingFinished.connect(self.long_dd_to_dms)

        self.pushButton_reset.clicked.connect(self.reset)

    @staticmethod
    def dd_to_dms(dd):
        if dd == 0:
            return 0, 0, 0, None
        min, sec = divmod(abs(dd) * 3600, 60)
        deg, min = divmod(min, 60)
        return deg, min, sec, int(dd > 0)

    @staticmethod
    def dms_to_dd(deg, min, sec, hem_index):
        return (deg + min / 60 + sec / 3600) * (hem_index * 2 - 1)

    def lat_dd_to_dms(self):
        deg, min, sec, hem_index = self.dd_to_dms(self.doubleSpinBox_lat_d.value())
        self.spinBox_lat_d.setValue(deg)
        self.spinBox_lat_m.setValue(min)
        self.doubleSpinBox_lat_s.setValue(sec)
        if hem_index is not None:
            self.comboBox_lat.setCurrentIndex(hem_index)

    def lat_dms_to_dd(self):
        self.doubleSpinBox_lat_d.setValue(
            self.dms_to_dd(
                self.spinBox_lat_d.value(),
                self.spinBox_lat_m.value(),
                self.doubleSpinBox_lat_s.value(),
                self.comboBox_lat.currentIndex(),
            )
        )

    def long_dd_to_dms(self):
        deg, min, sec, hem_index = self.dd_to_dms(self.doubleSpinBox_long_d.value())
        self.spinBox_long_d.setValue(deg)
        self.spinBox_long_m.setValue(min)
        self.doubleSpinBox_long_s.setValue(sec)
        if hem_index is not None:
            self.comboBox_long.setCurrentIndex(hem_index)

    def long_dms_to_dd(self):
        self.doubleSpinBox_long_d.setValue(
            self.dms_to_dd(
                self.spinBox_long_d.value(),
                self.spinBox_long_m.value(),
                self.doubleSpinBox_long_s.value(),
                self.comboBox_long.currentIndex(),
            )
        )

    def reset(self):
        self.spinBox_lat_d.setValue(0)
        self.spinBox_lat_m.setValue(0)
        self.doubleSpinBox_lat_s.setValue(0)
        self.comboBox_lat.setCurrentText("N")
        self.doubleSpinBox_lat_d.setValue(0)

        self.spinBox_long_d.setValue(0)
        self.spinBox_long_m.setValue(0)
        self.doubleSpinBox_long_s.setValue(0)
        self.comboBox_long.setCurrentText("E")
        self.doubleSpinBox_long_d.setValue(0)
